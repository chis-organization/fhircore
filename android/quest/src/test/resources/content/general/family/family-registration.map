map "https://fhir.labs.smartregister.org/fhir/StructureMap/d53f1f0b-32df-4fac-9f4c-69f758bf3006" = 'Recurring services encounter'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group ExtractEncounter(source questionnaireResponse: QuestionnaireResponse, target bundle: Bundle) {
    questionnaireResponse -> bundle.entry as entry, entry.resource = create("Encounter") as encounter then {
        questionnaireResponse -> encounter.id = uuid(),
            encounter.status = "finished",
            encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home"),
            encounter.priority = cc("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL", "Elective") as encounterPriority,
            encounterPriority.text = "Elective" "r_en_static";
        questionnaireResponse -> encounter.subject = evaluate(questionnaireResponse, $this.subject) "r_en_sub";
        questionnaireResponse -> encounter.period = create("Period") as period then {
            questionnaireResponse -> period.start = evaluate(questionnaireResponse, now()) "r_start";
            questionnaireResponse -> period.end = evaluate(questionnaireResponse, now()) "r_end";
        } "r_period";

        questionnaireResponse -> encounter.type = create('CodeableConcept') as type then {
            questionnaireResponse -> type.coding = create("Coding") as coding then {
                questionnaireResponse -> coding.system = "http://snomed.info/sct", coding.display = 'Recurring Service', coding.code = '33879002' "r_en_code_coding";
            } "r_en_reason_code";
            questionnaireResponse -> type.text = "Recurring Service Event" "r_en_type_text";
        } "r_en_reason";

        questionnaireResponse -> encounter.reasonCode = create('CodeableConcept') as reason then {
            questionnaireResponse -> reason.coding = create("Coding") as coding then {
                questionnaireResponse -> coding.system = "http://snomed.info/sct", coding.display = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-name').answer.value), coding.code = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-code').answer.value)  "r_en_code_coding";
            } "r_en_reason_code";
            questionnaireResponse -> reason.text = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-name').answer.value) "r_en_reason_text";
        } "r_en_reason";

        questionnaireResponse -> encounter.participant = create("Encounter_Participant") as partComp then {
            questionnaireResponse -> partComp.individual = create("Reference") as encounterOwner then {
                questionnaireResponse -> encounterOwner.reference = evaluate(questionnaireResponse, "Practitioner/"+ $this.meta.tag.where($this.system = "https://smartregister.org/practitioner-tag-id").code) "r_enc_part_reference";
            } "r_enc_part_individual";
        } "r_enc_part_component";

        questionnaireResponse then extractTaskOutput(questionnaireResponse, bundle, encounter) "rule_task_period_extraction";
        questionnaireResponse then extractTask(questionnaireResponse, bundle) "rule_task_period_extraction";
    } "r_encounter";
}

group extractTaskOutput(source questionnaireResponse : QuestionnaireResponse, target bundle: Bundle, source encounter : Encounter) {
    questionnaireResponse -> bundle.entry as entry, entry.resource = create('Task') as task then {
        questionnaireResponse -> task.id = create('id') as id then {
            questionnaireResponse -> id.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-id').answer.value.toString()) "rule_task_id";
        } "rule_update_task";

        // Task Encounter Output one
        questionnaireResponse -> task.output = create('Task_Output') as outputTask then {
            questionnaireResponse -> outputTask.type = create("CodeableConcept") as concept then {
                questionnaireResponse-> concept.coding = c("http://snomed.info/sct","41000179103") as coding then {
                    questionnaireResponse -> coding.display = "Immunization record (record artifact)" "rule_coding_display";
                } "rule_task_concept_coding";
            } "rule_codeable_concept";
            questionnaireResponse -> outputTask.value = reference(encounter) "rule_task_output_reference";
        } "rule_task_output";
    } "rule_task";
}

group extractTask(source questionnaireResponse : QuestionnaireResponse, target bundle: Bundle) {
    // fill task into careplan contained and add reference in activity.outcome
     questionnaireResponse -> bundle.entry as entry, entry.resource = create('Task') as task then {
        questionnaireResponse -> task.id =  uuid(),
            task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
            task.status = 'requested',
            task.intent = 'plan',
            task.priority = 'routine',
            task.for = evaluate(questionnaireResponse, $this.subject),
            task.basedOn = create('Reference') as ref, ref.reference = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-careplan').answer.value.toString()),
            task.authoredOn = evaluate(questionnaireResponse, now()),
            task.requester = create('Reference') as ref, ref.reference = evaluate(questionnaireResponse, "Practitioner/"+ $this.meta.tag.where($this.system = "https://smartregister.org/practitioner-tag-id").code),
            task.owner = create('Reference') as ref, ref.reference = evaluate(questionnaireResponse, "Practitioner/"+ $this.meta.tag.where($this.system = "https://smartregister.org/practitioner-tag-id").code) "r_task_data";

        questionnaireResponse -> task.executionPeriod = create('Period') as taskPeriod then {
            questionnaireResponse -> taskPeriod.start = evaluate(questionnaireResponse, now()) "r_start";
            questionnaireResponse -> taskPeriod.end = evaluate(questionnaireResponse, now()) "r_end";
        } "rule_period";

        // task groupIdentifier
        questionnaireResponse -> task.groupIdentifier = create('Identifier') as groupIdentifier then {
            questionnaireResponse -> groupIdentifier.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-group-id').answer.value.toString()) "rule_group_identifierule_value";
            questionnaireResponse -> groupIdentifier.use = "secondary" "rule_group_identifierule_use";
        } "rule_group_identifier";

        questionnaireResponse then extractPeriod(questionnaireResponse, task) "rule_task_period_extraction";
        questionnaireResponse then updateVitaminTask(questionnaireResponse, task) "rule_task_period_extraction";
        questionnaireResponse then addTaskToCarePlan(questionnaireResponse, task, bundle) "rule_task_period_extraction";
    } "r_task";
}


group updateVitaminTask(source questionnaireResponse: QuestionnaireResponse, target task: Task) {
    questionnaireResponse -> task.description = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-description').answer.value.toString()) "rule_task_description";
    questionnaireResponse -> task.code = create('CodeableConcept') as newCode then {
        questionnaireResponse -> newCode.coding = create('Coding') as newCoding then {
            questionnaireResponse -> newCoding.system = 'http://snomed.info/sct' "rule_task_system";
            questionnaireResponse -> newCoding.code = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-code').answer.value.toString()) "rule_task_code";
            questionnaireResponse -> newCoding.display = "Administration of vaccine to produce active immunity (procedure)" "rule_task_display";
        } "rule_task_coding";

        questionnaireResponse -> newCode.text = "Administration of vaccine to produce active immunity (procedure)" "rule_task_codeable_concept_text";
    } "rule_task_codeable_concept";

    questionnaireResponse -> task.reasonCode = create('CodeableConcept') as reasonCode then {
        questionnaireResponse -> reasonCode.coding = create('Coding') as reasonCoding then {
            questionnaireResponse -> reasonCoding.system = 'http://snomed.info/sct' "rule_task_reason_system";
            questionnaireResponse -> reasonCoding.code = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-reason-code').answer.value.toString()) "rule_task_reason_code";
            questionnaireResponse -> reasonCoding.display = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-name').answer.value.toString()) "rule_task_reason_display";
        } "rule_task_coding";

        questionnaireResponse -> reasonCode.text = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-description').answer.value.toString()) "rule_task_codeable_concept_text";
    } "rule_task_codeable_concept";

    questionnaireResponse -> task.executionPeriod = create('Period') as newPeriod then {
        questionnaireResponse -> newPeriod.start = evaluate(questionnaireResponse, now()) "r_start";
        questionnaireResponse -> newPeriod.end = evaluate(questionnaireResponse, (now().toString() + ' \'6 months\'').toQuantity()) "r_end";
    } "rule_period";

    // form to be filled
    questionnaireResponse -> task.reasonReference = create('Reference') as ref, ref.reference = 'Questionnaire/96639cda-9273-48bc-ac94-a7d39817caac' "r_task_reason_ref";
    questionnaireResponse -> evaluate(questionnaireResponse, "1795") as maxDays then extractTaskRestriction(questionnaireResponse, task, maxDays) "rule_task_restriction";
}

group extractTaskRestriction(source questionnaireResponse: QuestionnaireResponse, target task: Task, source restrictionEndDate: String) {
    questionnaireResponse -> evaluate(task, $this.executionPeriod.start) as start then {
        questionnaireResponse -> create("Task_Restriction") as taskRestriction then {
            questionnaireResponse->taskRestriction.period = create("Period") as taskRestrictionPeriod then {
                questionnaireResponse -> taskRestrictionPeriod.start = create('dateTime') as startDateTime,
                    startDateTime.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "rule_period_start";

                questionnaireResponse -> taskRestrictionPeriod.end = create('dateTime') as endDateTime,
                    endDateTime.value = evaluate(start, (($this + (((restrictionEndDate).toString() + ' \'days\'')).toQuantity()).value.substring(0,10)) + 'T00:00:00.00Z') "rule_period_end";

                questionnaireResponse -> task.restriction = taskRestriction "rule_restriction_period";
            } "rule_task_restriction_period";
        } "rule_task_restriction";
    } "rule_task_execution_period";
}

group addTaskToCarePlan(source questionnaireResponse: QuestionnaireResponse, source task: Task, target bundle: Bundle) {
    questionnaireResponse -> bundle.entry as entry, entry.resource = create('CarePlan') as carePlan then {
        questionnaireResponse -> carePlan.id = create('id') as id then {
            questionnaireResponse -> id.value = evaluate(questionnaireResponse, $this.item.where(linkId = 'task-careplan').answer.value.replaceMatches('/CarePlan/.*', '').toString()) "rule_careplan_id";
        } "rule_update_careplan";
        questionnaireResponse -> carePlan.activity = create('CarePlan_Activity') as activity then {
            questionnaireResponse -> activity.detail = create('CarePlan_ActivityDetail') as detail then {
                questionnaireResponse -> detail.kind = 'Task' "rule_task_kind";
            } "rule_activity_detail";
            questionnaireResponse -> activity.outcomeReference = create('Reference') as taskReference, evaluate(task, $this.id) as taskId then {
                questionnaireResponse -> taskReference.reference = evaluate(questionnaireResponse, 'Task/' + taskId) "rule_task_reference";
            } "rule_outcome_reference";
        } "rule_activity";
    } "rule_add_task";
}

group extractPeriod(source questionnaireResponse: QuestionnaireResponse, target task: Task) {
    questionnaireResponse -> evaluate(task, $this.executionPeriod.start) as start, evaluate(task, $this.executionPeriod.end) as end then {
        questionnaireResponse -> create('Period') as period then {
            questionnaireResponse -> period.start = create('dateTime') as startDateTime,
                startDateTime.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "rule_period_start";

            questionnaireResponse -> period.end = create('dateTime') as endDateTime,
                endDateTime.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "rule_period_end";

            questionnaireResponse -> task.executionPeriod = period "rule_execution_period";
        } "rule_period";
    } "rule_task_execution_period";
}